#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>
#include "controlcan.h"
#include "cansend.h"

#include <ctime>
#include <cstdlib>
#include "unistd.h"
// VCI_BOARD_INFO pInfo;//用来获取设备信息。
int count=0;//数据列表中，用来存储列表序号。

class Cansend
{
public:
    Cansend(){
        printf(">>this is hello !\r\n");//指示程序已运行
        if(VCI_OpenDevice(VCI_USBCAN2,0,0)==1)//打开设备
        {
            printf(">>open deivce success!\n");//打开设备成功
        }else
        {
            printf(">>open deivce error!\n");
            exit(1);
        }
        if(VCI_ReadBoardInfo(VCI_USBCAN2,0,&pInfo)==1)//读取设备序列号、版本等信息。
        {
                    printf(">>Get VCI_ReadBoardInfo success!\n");
            
            //printf(" %08X", pInfo.hw_Version);printf("\n");
            //printf(" %08X", pInfo.fw_Version);printf("\n");
            //printf(" %08X", pInfo.dr_Version);printf("\n");
            //printf(" %08X", pInfo.in_Version);printf("\n");
            //printf(" %08X", pInfo.irq_Num);printf("\n");
            //printf(" %08X", pInfo.can_Num);printf("\n");
            printf(">>Serial_Num:%c", pInfo.str_Serial_Num[0]);
            printf("%c", pInfo.str_Serial_Num[1]);
            printf("%c", pInfo.str_Serial_Num[2]);
            printf("%c", pInfo.str_Serial_Num[3]);
            printf("%c", pInfo.str_Serial_Num[4]);
            printf("%c", pInfo.str_Serial_Num[5]);
            printf("%c", pInfo.str_Serial_Num[6]);
            printf("%c", pInfo.str_Serial_Num[7]);
            printf("%c", pInfo.str_Serial_Num[8]);
            printf("%c", pInfo.str_Serial_Num[9]);
            printf("%c", pInfo.str_Serial_Num[10]);
            printf("%c", pInfo.str_Serial_Num[11]);
            printf("%c", pInfo.str_Serial_Num[12]);
            printf("%c", pInfo.str_Serial_Num[13]);
            printf("%c", pInfo.str_Serial_Num[14]);
            printf("%c", pInfo.str_Serial_Num[15]);
            printf("%c", pInfo.str_Serial_Num[16]);
            printf("%c", pInfo.str_Serial_Num[17]);
            printf("%c", pInfo.str_Serial_Num[18]);
            printf("%c", pInfo.str_Serial_Num[19]);printf("\n");

            printf(">>hw_Type:%c", pInfo.str_hw_Type[0]);
            printf("%c", pInfo.str_hw_Type[1]);
            printf("%c", pInfo.str_hw_Type[2]);
            printf("%c", pInfo.str_hw_Type[3]);
            printf("%c", pInfo.str_hw_Type[4]);
            printf("%c", pInfo.str_hw_Type[5]);
            printf("%c", pInfo.str_hw_Type[6]);
            printf("%c", pInfo.str_hw_Type[7]);
            printf("%c", pInfo.str_hw_Type[8]);
            printf("%c", pInfo.str_hw_Type[9]);printf("\n");	
        }else
        {
            printf(">>Get VCI_ReadBoardInfo error!\n");
            exit(1);
        }

        //初始化参数，严格参数二次开发函数库说明书。
        VCI_INIT_CONFIG config;
        config.AccCode=0;
        config.AccMask=0xFFFFFFFF;
        config.Filter=1;//接收所有帧
        config.Timing0=0x03;/*波特率125 Kbps  0x03  0x1C*/
        config.Timing1=0x1C;
        config.Mode=0;//正常模式		
        
        if(VCI_InitCAN(VCI_USBCAN2,0,0,&config)!=1)
        {
            printf(">>Init CAN1 error\n");
            VCI_CloseDevice(VCI_USBCAN2,0);
        }

        if(VCI_StartCAN(VCI_USBCAN2,0,0)!=1)
        {
            printf(">>Start CAN1 error\n");
            VCI_CloseDevice(VCI_USBCAN2,0);

        }

        if(VCI_InitCAN(VCI_USBCAN2,0,1,&config)!=1)
        {
            printf(">>Init can2 error\n");
            VCI_CloseDevice(VCI_USBCAN2,0);

        }
        if(VCI_StartCAN(VCI_USBCAN2,0,1)!=1)
        {
            printf(">>Start can2 error\n");
            VCI_CloseDevice(VCI_USBCAN2,0);

        }
        }
    virtual ~Cansend(){
        VCI_ResetCAN(VCI_USBCAN2, 0, 0);//复位CAN1通道。
        usleep(100000);//延时100ms。
        VCI_ResetCAN(VCI_USBCAN2, 0, 1);//复位CAN2通道。
        usleep(100000);//延时100ms。
        VCI_CloseDevice(VCI_USBCAN2,0);//关闭设备。
    };
    int send(int id, int CANx, int type, const char *pdata);
    static void *receive_func(void* param); 
    template <typename sdo>
        char* SDODataPack(sdo data, unsigned short index, char subindex);
private:
    VCI_BOARD_INFO pInfo;//用来获取设备信息
    /* data */
};
void *Cansend::receive_func(void* param)  //接收线程。
{
	int reclen=0;
	VCI_CAN_OBJ rec[3000];//接收缓存，设为3000为佳。
	int i,j;
	
	int *run=(int*)param;//线程启动，退出控制。
    int ind=0;
	
	while((*run)&0x0f)
	{
		if((reclen=VCI_Receive(VCI_USBCAN2,0,ind,rec,3000,100))>0)//调用接收函数，如果有数据，进行数据处理显示。
		{
			for(j=0;j<reclen;j++)
			{
				printf("Index:%04d  ",count);count++;//序号递增
				printf("CAN%d RX ID:0x%08X", ind+1, rec[j].ID);//ID
				if(rec[j].ExternFlag==0) printf(" Standard ");//帧格式：标准帧
				if(rec[j].ExternFlag==1) printf(" Extend   ");//帧格式：扩展帧
				if(rec[j].RemoteFlag==0) printf(" Data   ");//帧类型：数据帧
				if(rec[j].RemoteFlag==1) printf(" Remote ");//帧类型：远程帧
				printf("DLC:0x%02X",rec[j].DataLen);//帧长度
				printf(" data:0x");	//数据
				for(i = 0; i < rec[j].DataLen; i++)
				{
					printf(" %02X", rec[j].Data[i]);
				}
				printf(" TimeStamp:0x%08X",rec[j].TimeStamp);//时间标识。
				printf("\n");
			}
		}
		ind=!ind;//变换通道号，以便下次读取另一通道，交替读取。		
	}
	printf("run thread exit\n");//退出接收线程	
	pthread_exit(0);
}

template <typename sdo>
char* Cansend::SDODataPack(sdo data, unsigned short index, char subindex){
    SDOData sdodata;
    char sdoarray[8];
    int i;
    size_t len = sizeof(data);
    sdodata.cmd = 0x23 + 4 * len - 4;
    sdodata.index = index;
    sdodata.subindex = subindex;
    switch (sdodata.cmd)
    {
        case 0x2f:
            /* 1字节数据 */
            sdodata.data[0] = data;
            sdodata.data[1] = 0x00;
            sdodata.data[2] = 0x00;
            sdodata.data[3] = 0x00;
            break;
        case 0x2b:
            sdodata.data[0] = (data<<8)>>8;
            sdodata.data[1] = data>>8;
            sdodata.data[2] = 0x00;
            sdodata.data[3] = 0x00;
            break;
        case 0x27:
            sdodata.data[0] = (data<<16)>>16;
            sdodata.data[1] = (data<<8)>>16;
            sdodata.data[2] = data>>16;
            sdodata.data[3] = 0x00;
            break;
        case 0x23:
            sdodata.data[0] = (data<<24)>>24;
            sdodata.data[1] = (data<<16)>>24;
            sdodata.data[2] = (data<<8)>>24;
            sdodata.data[3] = data>>24;
            break;
    }
    sdoarray[0] = sdodata.cmd;
	sdoarray[1] = (sdodata.index<<8)>>8;
	sdoarray[2] =  sdodata.index>>8;
	sdoarray[3] = sdodata.subindex;
	for (i = 4 ; i < 8 ; i++) {
		sdoarray[i] =  sdodata.data[i-4];
	}
    return sdoarray;
    
}

int Cansend::send(int id, int CANx, int type, const char *pdata){
    //需要发送的帧，结构体设置
    SDOData sdodata;
    VCI_CAN_OBJ send[1];
	send[0].ID = type + id;
	send[0].SendType=0;
	send[0].RemoteFlag=0;
	send[0].ExternFlag=1;
	send[0].DataLen=8;
	
	int i=0;
	for(i = 0; i < send[0].DataLen; i++)
	{
		send[0].Data[i] = pdata[i];
	}

    		if(VCI_Transmit(VCI_USBCAN2, 0, CANx, send, 1) == 1)
		{
			printf("Index:%04d  ",count);count++;
			printf("CAN1 TX ID:0x%08X",send[0].ID);
			if(send[0].ExternFlag==0) printf(" Standard ");
			if(send[0].ExternFlag==1) printf(" Extend   ");
			if(send[0].RemoteFlag==0) printf(" Data   ");
			if(send[0].RemoteFlag==1) printf(" Remote ");
			printf("DLC:0x%02X",send[0].DataLen);
			printf(" data:0x");

			for(i=0;i<send[0].DataLen;i++)
			{
				printf(" %02X",send[0].Data[i]);
			}

			printf("\n");
			send[0].ID+=1;
		}

		// if(VCI_Transmit(VCI_USBCAN2, 0, 1, send, 1) == 1)
		// {
		// 	printf("Index:%04d  ",count);count++;
		// 	printf("CAN2 TX ID:0x%08X", send[0].ID);
		// 	if(send[0].ExternFlag==0) printf(" Standard ");
		// 	if(send[0].ExternFlag==1) printf(" Extend   ");
		// 	if(send[0].RemoteFlag==0) printf(" Data   ");
		// 	if(send[0].RemoteFlag==1) printf(" Remote ");
		// 	printf("DLC:0x%02X",send[0].DataLen);
		// 	printf(" data:0x");			
		// 	for(i = 0; i < send[0].DataLen; i++)
		// 	{
		// 		printf(" %02X", send[0].Data[i]);
		// 	}
		// 	printf("\n");
		// 	send[0].ID+=1;
		// }    
}

int main(int argc, char *argv[])
{
    Cansend cansend1;
    //启动接收线程
    int m_run0=1;
	pthread_t threadid;
	int ret;
	ret=pthread_create(&threadid,NULL,&cansend1.receive_func,&m_run0);

    int a[8]={1,2,3,4,5,6,7,8};
    int vel = 1000;
    char * sdo1 = cansend1.SDODataPack(1000, TV_V, 0x00);
    cansend1.send(0,CAN1,WriteSDO,sdo1);

    usleep(10000000);//延时单位us，这里设置 10 000 000=10s    10s后关闭接收线程，并退出主程序。
	m_run0=0;//线程关闭指令。
	pthread_join(threadid,NULL);//等待线程关闭。

    return 0;
}