// Generated by gencpp from file testcan/IpPos.msg
// DO NOT EDIT!


#ifndef TESTCAN_MESSAGE_IPPOS_H
#define TESTCAN_MESSAGE_IPPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace testcan
{
template <class ContainerAllocator>
struct IpPos_
{
  typedef IpPos_<ContainerAllocator> Type;

  IpPos_()
    : pos(0.0)
    , angle(0.0)
    , id(0)  {
    }
  IpPos_(const ContainerAllocator& _alloc)
    : pos(0.0)
    , angle(0.0)
    , id(0)  {
  (void)_alloc;
    }



   typedef double _pos_type;
  _pos_type pos;

   typedef double _angle_type;
  _angle_type angle;

   typedef int8_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::testcan::IpPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::testcan::IpPos_<ContainerAllocator> const> ConstPtr;

}; // struct IpPos_

typedef ::testcan::IpPos_<std::allocator<void> > IpPos;

typedef boost::shared_ptr< ::testcan::IpPos > IpPosPtr;
typedef boost::shared_ptr< ::testcan::IpPos const> IpPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::testcan::IpPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::testcan::IpPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace testcan

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'testcan': ['/home/d/catkin_ws/src/robot_driver/CANopen_v1-master/testcan/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::testcan::IpPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::testcan::IpPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testcan::IpPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::testcan::IpPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testcan::IpPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::testcan::IpPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::testcan::IpPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e1eb587452ef16e6a9148c35801e972";
  }

  static const char* value(const ::testcan::IpPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e1eb587452ef16eULL;
  static const uint64_t static_value2 = 0x6a9148c35801e972ULL;
};

template<class ContainerAllocator>
struct DataType< ::testcan::IpPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "testcan/IpPos";
  }

  static const char* value(const ::testcan::IpPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::testcan::IpPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pos\n\
float64 angle\n\
int8 id\n\
";
  }

  static const char* value(const ::testcan::IpPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::testcan::IpPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.angle);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IpPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::testcan::IpPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::testcan::IpPos_<ContainerAllocator>& v)
  {
    s << indent << "pos: ";
    Printer<double>::stream(s, indent + "  ", v.pos);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TESTCAN_MESSAGE_IPPOS_H
